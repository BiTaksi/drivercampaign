// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/httpclient/httpclient.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	httpclient "github.com/BiTaksi/drivercampaign/pkg/httpclient"
	gomock "github.com/golang/mock/gomock"
)

// MockIHTTPClient is a mock of IHTTPClient interface.
type MockIHTTPClient struct {
	ctrl     *gomock.Controller
	recorder *MockIHTTPClientMockRecorder
}

// MockIHTTPClientMockRecorder is the mock recorder for MockIHTTPClient.
type MockIHTTPClientMockRecorder struct {
	mock *MockIHTTPClient
}

// NewMockIHTTPClient creates a new mock instance.
func NewMockIHTTPClient(ctrl *gomock.Controller) *MockIHTTPClient {
	mock := &MockIHTTPClient{ctrl: ctrl}
	mock.recorder = &MockIHTTPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIHTTPClient) EXPECT() *MockIHTTPClientMockRecorder {
	return m.recorder
}

// GetJSONHeaders mocks base method.
func (m *MockIHTTPClient) GetJSONHeaders() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJSONHeaders")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// GetJSONHeaders indicates an expected call of GetJSONHeaders.
func (mr *MockIHTTPClientMockRecorder) GetJSONHeaders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJSONHeaders", reflect.TypeOf((*MockIHTTPClient)(nil).GetJSONHeaders))
}

// HandleException mocks base method.
func (m *MockIHTTPClient) HandleException(resp *httpclient.Response) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleException", resp)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleException indicates an expected call of HandleException.
func (mr *MockIHTTPClientMockRecorder) HandleException(resp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleException", reflect.TypeOf((*MockIHTTPClient)(nil).HandleException), resp)
}

// HandleInternalException mocks base method.
func (m *MockIHTTPClient) HandleInternalException(resp *httpclient.Response) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleInternalException", resp)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleInternalException indicates an expected call of HandleInternalException.
func (mr *MockIHTTPClientMockRecorder) HandleInternalException(resp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleInternalException", reflect.TypeOf((*MockIHTTPClient)(nil).HandleInternalException), resp)
}

// HandleRequest mocks base method.
func (m *MockIHTTPClient) HandleRequest(ctx context.Context, req httpclient.Request) (*httpclient.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleRequest", ctx, req)
	ret0, _ := ret[0].(*httpclient.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleRequest indicates an expected call of HandleRequest.
func (mr *MockIHTTPClientMockRecorder) HandleRequest(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRequest", reflect.TypeOf((*MockIHTTPClient)(nil).HandleRequest), ctx, req)
}

// IsSuccessStatusCode mocks base method.
func (m *MockIHTTPClient) IsSuccessStatusCode(resp *httpclient.Response) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSuccessStatusCode", resp)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSuccessStatusCode indicates an expected call of IsSuccessStatusCode.
func (mr *MockIHTTPClientMockRecorder) IsSuccessStatusCode(resp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSuccessStatusCode", reflect.TypeOf((*MockIHTTPClient)(nil).IsSuccessStatusCode), resp)
}
