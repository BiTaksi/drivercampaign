// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/eventmanager/manager.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	kafka "github.com/BiTaksi/drivercampaign/pkg/kafka"
	sarama "github.com/IBM/sarama"
	gomock "github.com/golang/mock/gomock"
)

// MockIEventManager is a mock of IEventManager interface.
type MockIEventManager struct {
	ctrl     *gomock.Controller
	recorder *MockIEventManagerMockRecorder
}

// MockIEventManagerMockRecorder is the mock recorder for MockIEventManager.
type MockIEventManagerMockRecorder struct {
	mock *MockIEventManager
}

// NewMockIEventManager creates a new mock instance.
func NewMockIEventManager(ctrl *gomock.Controller) *MockIEventManager {
	mock := &MockIEventManager{ctrl: ctrl}
	mock.recorder = &MockIEventManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIEventManager) EXPECT() *MockIEventManagerMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockIEventManager) Handle(ctx context.Context, msg *sarama.ConsumerMessage) (*kafka.MessageInput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", ctx, msg)
	ret0, _ := ret[0].(*kafka.MessageInput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Handle indicates an expected call of Handle.
func (mr *MockIEventManagerMockRecorder) Handle(ctx, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockIEventManager)(nil).Handle), ctx, msg)
}

// HandleException mocks base method.
func (m *MockIEventManager) HandleException(eventType string, err error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleException", eventType, err)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleException indicates an expected call of HandleException.
func (mr *MockIEventManagerMockRecorder) HandleException(eventType, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleException", reflect.TypeOf((*MockIEventManager)(nil).HandleException), eventType, err)
}
