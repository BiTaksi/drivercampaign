// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/kafka/producer.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	kafka "github.com/BiTaksi/drivercampaign/pkg/kafka"
	sarama "github.com/IBM/sarama"
	gomock "github.com/golang/mock/gomock"
)

// MockIProducerInstance is a mock of IProducerInstance interface.
type MockIProducerInstance struct {
	ctrl     *gomock.Controller
	recorder *MockIProducerInstanceMockRecorder
}

// MockIProducerInstanceMockRecorder is the mock recorder for MockIProducerInstance.
type MockIProducerInstanceMockRecorder struct {
	mock *MockIProducerInstance
}

// NewMockIProducerInstance creates a new mock instance.
func NewMockIProducerInstance(ctrl *gomock.Controller) *MockIProducerInstance {
	mock := &MockIProducerInstance{ctrl: ctrl}
	mock.recorder = &MockIProducerInstanceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIProducerInstance) EXPECT() *MockIProducerInstanceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockIProducerInstance) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockIProducerInstanceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIProducerInstance)(nil).Close))
}

// PrepareMessage mocks base method.
func (m *MockIProducerInstance) PrepareMessage(mi *kafka.MessageInput) *sarama.ProducerMessage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareMessage", mi)
	ret0, _ := ret[0].(*sarama.ProducerMessage)
	return ret0
}

// PrepareMessage indicates an expected call of PrepareMessage.
func (mr *MockIProducerInstanceMockRecorder) PrepareMessage(mi interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareMessage", reflect.TypeOf((*MockIProducerInstance)(nil).PrepareMessage), mi)
}

// SendMessage mocks base method.
func (m *MockIProducerInstance) SendMessage(mi *kafka.MessageInput) (*kafka.Output, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", mi)
	ret0, _ := ret[0].(*kafka.Output)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockIProducerInstanceMockRecorder) SendMessage(mi interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockIProducerInstance)(nil).SendMessage), mi)
}
